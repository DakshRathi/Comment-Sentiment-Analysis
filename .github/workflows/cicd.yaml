name: CICD Pipeline

on: push

jobs:
  model-deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run pipeline
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-north-1
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: dvc repro

      - name: Push DVC-tracked data to remote
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-north-1
        run: dvc push 

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add changes to Git
        run: git add .

      - name: Commit changes
        if: ${{ github.actor != 'github-actions[bot]' }}
        run: git commit -m "Automated commit of DVC outputs and updated code" || echo "No changes to commit"

      - name: Push changes
        if: ${{ github.actor != 'github-actions[bot]' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: git push origin ${{ github.ref_name }}

      - name: Run model loading test
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: pytest  -p no:warnings -s scripts/load_model_test.py

      - name: Run model performance test
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: pytest  -p no:warnings -s scripts/performance_test.py

      - name: Promote model to production
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: python scripts/promote_model.py

      - name: Start FastAPI App
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: nohup python fastapi/app.py &

      - name: Run FastAPI tests
        run: pytest -p no:warnings -s scripts/fastapi_test.py

      - name: Stop FastAPI App
        run: killall python

      - name: Login to AWS ECR
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/m3t3s7a1

      - name: Build Docker image
        if: success()
        run: |
          docker build -t yt-plugin .

      - name: Tag Docker image
        if: success()
        run: |
          docker tag yt-plugin:latest public.ecr.aws/m3t3s7a1/yt-plugin:latest

      - name: Push Docker image to AWS ECR
        if: success()
        run: |
          docker push public.ecr.aws/m3t3s7a1/yt-plugin:latest

      # Zip the required files
      - name: Zip files for deployment
        if: success()
        run: |
          zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh deploy/scripts/start_docker.sh

      # Upload the ZIP file to S3
      - name: Upload ZIP and secret to S3
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          aws s3 cp deployment.zip s3://ytcodedeploybucket/deployment.zip
          echo "DAGSHUB_PAT=${{ secrets.DAGSHUB_PAT }}" > /tmp/dagshub.env
          aws s3 cp /tmp/dagshub.env s3://ytcodedeploybucket/dagshub.env

      # Deploy to AWS CodeDeploy using the uploaded ZIP file
      - name: Deploy to AWS CodeDeploy
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws deploy create-deployment \
            --application-name YT-Plugin \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name YT-Plugin-Deployment-Group \
            --s3-location bucket=ytcodedeploybucket,key=deployment.zip,bundleType=zip \
            --file-exists-behavior OVERWRITE \
            --region eu-north-1